<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Aeolia'Space]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://suprise.github.io/blog_hexo/"/>
  <updated>2015-04-09T16:35:26.000Z</updated>
  <id>https://suprise.github.io/blog_hexo/</id>
  
  <author>
    <name><![CDATA[Aeolia]]></name>
    <email><![CDATA[yiaolia@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[周记150406-09]]></title>
    <link href="https://suprise.github.io/blog_hexo/2015/04/09/%E5%91%A8%E8%AE%B0150406-09/"/>
    <id>https://suprise.github.io/blog_hexo/2015/04/09/周记150406-09/</id>
    <published>2015-04-09T15:30:37.000Z</published>
    <updated>2015-04-09T16:35:26.000Z</updated>
    <content type="html"><![CDATA[<p>一周要点：</p>
<ul>
<li>搭建新博客。</li>
<li>论文修改、查重、准备答辩。<a id="more"></a>
</li>
</ul>
<p>下周计划：</p>
<ul>
<li>论文答辩</li>
<li>R语言学习</li>
<li>安卓学习</li>
<li>总结博客搭建时踩过的那些坑</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>一周要点：</p>
<ul>
<li>搭建新博客。</li>
<li>论文修改、查重、准备答辩。]]>
    
    </summary>
    
      <category term="周记" scheme="https://suprise.github.io/blog_hexo/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="weekSum" scheme="https://suprise.github.io/blog_hexo/categories/weekSum/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新博客建成]]></title>
    <link href="https://suprise.github.io/blog_hexo/2015/04/09/new-blog/"/>
    <id>https://suprise.github.io/blog_hexo/2015/04/09/new-blog/</id>
    <published>2015-04-09T11:16:07.000Z</published>
    <updated>2015-04-09T16:54:01.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>为什么建新博客？<br> 域名和服务器快到期了啊，而且之前只是买的vps，操作各种不方便。阿里云服务器又略贵，So……还是大型同性社交网站Github Pages最给力了！</p>
<a id="more"></a>
</li>
<li><p>为什么建新博客？<br> 这次建新博客主要对比了4种博客框架，WP之前用过自然是不用了，Ghost需要买服务器或者付费进行部署，对Node的版本也有要求，而jekyll和hexo则是基于Github Pages的博客搭建框架，完全免费，搭建起来也非常方便。</p>
</li>
<li><p>为什么建新博客？<br> jekyll和hexo两个博客框架这一次我都进行了尝试。觉得对于前端而言，还是后者更好，主要是有：</p>
<ol>
<li>只需要Node环境，免去了下载Ruby\Devkit\Gems的麻烦。</li>
<li>支持markdown</li>
<li>便于扩展，可以更方便地写第三方插件。</li>
<li>已有插件功能较为全面。</li>
</ol>
</li>
<li><p>为什么建新博客？<br> 这次搭建博客主要进行了以下收获：</p>
<ol>
<li>mobile first，对移动端进行响应式支持。（但操作方面没有进行特别的支持，后续可以尝试）</li>
<li>尝试了一些更为酷炫的效果。</li>
<li>尝试了jade\ejs\less\autoprefixer等技术</li>
</ol>
</li>
<li><p>可是……你还是没回答为什么要重新搭一个博客啊？<br> 因为手痒（PIA飞），其实主要是开始学一些新东西，希望有一个地方能够进行记录</p>
</li>
</ol>
<p>另，感谢<a href="http://lingyu.wang" target="_blank" rel="external">@天镶</a>大大关于jekyll搭建博客的<a href="http://segmentfault.com/a/1190000000406011" target="_blank" rel="external">教程</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>为什么建新博客？<br> 域名和服务器快到期了啊，而且之前只是买的vps，操作各种不方便。阿里云服务器又略贵，So……还是大型同性社交网站Github Pages最给力了！</p>]]>
    
    </summary>
    
      <category term="生活" scheme="https://suprise.github.io/blog_hexo/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="life" scheme="https://suprise.github.io/blog_hexo/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用javascript操作伪类和伪元素]]></title>
    <link href="https://suprise.github.io/blog_hexo/2014/03/09/javascript-pesudo/"/>
    <id>https://suprise.github.io/blog_hexo/2014/03/09/javascript-pesudo/</id>
    <published>2014-03-09T14:48:11.000Z</published>
    <updated>2015-04-09T16:31:40.000Z</updated>
    <content type="html"><![CDATA[<p>通常而言，我们是不需要直接改变某一元素的伪类和伪元素这些cssRule的，正常的做法是切换某一元素的类，来应用预先写好的伪类和伪元素。<br>比如$(‘div’).toggleClass(‘someclass’);</p>
<p>但我还是想看看如何用javascript直接改变伪类和伪元素的内容，该怎么做呢？<br><a id="more"></a><br>为内部css时，比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css"></span><br><span class="line">    <span class="rule"><span class="attribute">a</span>:<span class="value">hover &#123;color:blue</span></span>;&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>则可用如下方式进行修改<br>先获得CSSStyleSheet<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sheet = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(‘style’)[<span class="number">0</span>].sheet;</span><br></pre></td></tr></table></figure></p>
<p>然后即可删除(sheet.removeRule(index)或sheet.deleteRule(index))和增加CSS规则(sheet.addRule(selector,text)或sheet.insertRule(selector,text))<br>注:此时sheet下有cssRules属性，cssRules下的cssRule下有cssText可用来过滤获得对应的index</p>
<p>还可以使用正则表达式来改变style的innerHTML<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(&#125;)([\s\S]+:[\s]*hover[\s]*(,|&#123;))+[\s\S]+?&#125;/</span>; </span><br><span class="line">style.innerHTML = style.innerHTML.replace(reg,’$<span class="number">1</span>′);</span><br></pre></td></tr></table></figure></p>
<p>当为外部css时，无法用innerHTML的方式来改变其内容,也无法过滤cssText来获得对应的Index，不过removeRule等API依旧有效。</p>
<p>结论是:我还没有找到好的方法来直接操作伪类和伪元素，等以后看完标准再来看看有没有方法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>通常而言，我们是不需要直接改变某一元素的伪类和伪元素这些cssRule的，正常的做法是切换某一元素的类，来应用预先写好的伪类和伪元素。<br>比如$(‘div’).toggleClass(‘someclass’);</p>
<p>但我还是想看看如何用javascript直接改变伪类和伪元素的内容，该怎么做呢？<br>]]>
    
    </summary>
    
      <category term="JS" scheme="https://suprise.github.io/blog_hexo/tags/JS/"/>
    
      <category term="伪元素" scheme="https://suprise.github.io/blog_hexo/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    
      <category term="伪类" scheme="https://suprise.github.io/blog_hexo/tags/%E4%BC%AA%E7%B1%BB/"/>
    
      <category term="tech" scheme="https://suprise.github.io/blog_hexo/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端杂记]]></title>
    <link href="https://suprise.github.io/blog_hexo/2013/10/12/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/"/>
    <id>https://suprise.github.io/blog_hexo/2013/10/12/前端杂记/</id>
    <published>2013-10-12T15:08:13.000Z</published>
    <updated>2015-04-09T15:15:40.000Z</updated>
    <content type="html"><![CDATA[<p>1，当表单中有元素name为submit时，会覆盖表单的submit方法<br>2，刷新页面时，FF不会重置表单中勾选、填写的内容，连selected都没用，所以要么手动重置，要么auto-complete=off</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1，当表单中有元素name为submit时，会覆盖表单的submit方法<br>2，刷新页面时，FF不会重置表单中勾选、填写的内容，连selected都没用，所以要么手动重置，要么auto-complete=off</p>
]]>
    </summary>
    
      <category term="tech" scheme="https://suprise.github.io/blog_hexo/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chrome下的迅雷扩展实现整理(旧文迁移)]]></title>
    <link href="https://suprise.github.io/blog_hexo/2013/08/04/thunder-chrome-extension/"/>
    <id>https://suprise.github.io/blog_hexo/2013/08/04/thunder-chrome-extension/</id>
    <published>2013-08-04T12:47:31.000Z</published>
    <updated>2015-04-09T14:22:22.000Z</updated>
    <content type="html"><![CDATA[<p>自从前段时间原先用的迅雷下载扩展被新的运营团队添加了它们自己的页面导航以后，有以下几点非常不爽（虽然它们的界面仿三星操作系统感觉还行）</p>
<ol>
<li>没有经过用户的允许</li>
<li>没有页面的统计排序</li>
<li>每项之间空隙过小，眼睛不容易识别，比较累</li>
<li>需要手动添加网址记录而不是自动记录</li>
<li>喵的我的MIKU 主题被覆盖了!</li>
</ol>
<p>而该迅雷扩展好用在遇到资源可以（右键-&gt;迅雷下载）并自动启动迅雷，从而省去了我（开始菜单—&gt;找寻+鼠标移动—&gt;迅雷软件—&gt;找寻+鼠标移动—&gt;启动迅雷）的这么一个繁琐的操作，所以写一个还是很必要的。</p>
<p>第一天，白天玩，吃过晚饭后，我先大致了解一下迅雷链接的<a href="http://zhainan.org/post-914.html" target="_blank" rel="external">转换原理</a>，然后开始学习Base64编码，最后用JS以类的形式将其实现。<br>之所以选择类的方式而不是对象的方式来实现，是因为编码和解码函数要共用一个hash_map，而这一个共有hash_map只能是私有变量，如果对象要实现私有变量只能用闭包的方式，所以会导致冗余。</p>
<p><a href="http://zh.wikipedia.org/wiki/Base64" target="_blank" rel="external">Base64</a>是一种常用于邮件的编码，可逆，所以只是防君子不防小人。</p>
<h4 id="编码："><em>编码：</em></h4><ol>
<li><p>选取3个字节，总共24位，看成4个6位的数据，在每个6位的数据前面补充0，最后获得4个字节，转换为十进制数字。补充位和去除位采用位与、位或等操作。若最后不足3个字节，则用0补足。<br> 补充一下，因为chrome对JS的位操作是转换成C然后编译实现的，速度很快——《高性能Javascript》</p>
<p> <strong>例</strong>，常见的htt的十进制码为104,116,116。<br> 二进制码为 01101000,01110100,01110100<br> 分成四个6位的数据 011010,000111,010001,110100<br> 补充0 00011010,00000111,00010001,00110100<br> 转换为十进制 26,7,17,52</p>
</li>
<li>根据表转换为对应的数值<br><img src="http://chen-xi-se.com/wp-content/uploads/2013/08/Base64-%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%EF%BC%8C%E8%87%AA%E7%94%B1%E7%9A%84%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6-285x300.png" alt="base64转换表"><br> <strong>例</strong>，上一步得到的26,7,17,52分别转换为a,H,R,0，然后连起来就变成aHR0了</li>
<li>收尾，如果最后不足3个字节，则差X个字节，就在链接后补X个=字符。同时，根据<a href="http://tools.ietf.org/html/rfc1421" target="_blank" rel="external">RFC1421</a>，每76个字节则换一行（需要注意，网上找的实现方式很可能漏了这一点）</li>
</ol>
<p>解码则是逆操作即可。</p>
<p>开始看<a href="http://code.google.com/chrome/extensions/getstarted.html" target="_blank" rel="external">Chrome扩展文档</a>，也有<a href="http://www.lmk123.com/docs/getstarted.html" target="_blank" rel="external">中文版</a>的，通过demo大致了解<a href="http://www.lmk123.com/docs/contextMenus.html" target="_blank" rel="external">右键菜单的API</a>使用方法和对background的使用范围进行了测试，对程序进行了大致的设计。</p>
<p>编写简单的右键菜单demo，然后对chrome如何触发外部协议请求进行研究（即chrome如何调用本地程序并将转换好的迅雷链接传递过去）。看了一晚上的文档，都没找到合适的方法，唯一一种文档中记录的方法是通过<a href="http://www.lmk123.com/docs/npapi.html" target="_blank" rel="external">NPAPI</a>机制调用本地的dll文件（官方扩展应该就是通过这种方式实现的），但这种商业软件几乎不可能不加壳，就算不加壳，没有文档的话找起API来也是非常麻烦的事情，所以这种方法暂时PASS掉。</p>
<p>灵机一动，将某一个页面的a标签的链接改为”thunder://Q”，然后点击，发现可以触发外部协议请求。银瓶乍破水浆迸，铁骑突出刀枪鸣，点击菜单——获得URL——转换为源URL——转换为迅雷专用链——生成a标签——设置a标签——生成鼠标事件——初始化点击事件——触发点击事件！非常符合逻辑的结构！结果，当然是失败，使用<a href="http://www.lmk123.com/docs/background_pages.html" target="_blank" rel="external">background</a>来执行js的话相当于在沙箱中执行，无法还原页面中js的效果。看来必须得使用content_scripts了，快两点了，收工睡觉。</p>
<p>开始详细看content_scripts的文档，尝试将上述转换为迅雷专用链以后的过程放在<a href="http://www.lmk123.com/docs/content_scripts.html" target="_blank" rel="external">content_scripts</a>里实现，并通过<a href="http://www.lmk123.com/docs/content_scripts.html#pi" target="_blank" rel="external">插入代码</a>机制，实现了上述过程。结果，虽然基本实现了功能，但在测试时发现了一个致命的bug——点击，然后触发外部协议请求确认框的时候，如果选择取消，则到本页面刷新/跳转为止，再次点击不会触发这一外部协议请求！<br>比如可以用chrome控制台执行如下代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>),</span><br><span class="line">event =<span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</span><br><span class="line">a.href=<span class="string">"thunder://QE"</span>;</span><br><span class="line">event.initEvent(<span class="string">"click"</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="built_in">document</span>.defaultView,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line">a.dispatchEvent(event);</span><br></pre></td></tr></table></figure></p>
<p>会发现如果确认框选择“取消程序启动”的话，会导致再次执行这些代码的时候不会触发外部协议请求。</p>
<p>最后得到原作者的指导，解决了这一问题（不过牺牲了部分性能），详情见<a href="">源代码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自从前段时间原先用的迅雷下载扩展被新的运营团队添加了它们自己的页面导航以后，有以下几点非常不爽（虽然它们的界面仿三星操作系统感觉还行）</p>
<ol>
<li>没有经过用户的允许</li>
<li>没有页面的统计排序</li>
<li>每项之间空隙过小，眼睛不容易识别，比]]>
    </summary>
    
      <category term="Base64" scheme="https://suprise.github.io/blog_hexo/tags/Base64/"/>
    
      <category term="Chrome扩展" scheme="https://suprise.github.io/blog_hexo/tags/Chrome%E6%89%A9%E5%B1%95/"/>
    
      <category term="tech" scheme="https://suprise.github.io/blog_hexo/categories/tech/"/>
    
  </entry>
  
</feed>